generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Adjustment {
  id                                 Int                     @id @default(autoincrement())
  date                               DateTime
  status                             String
  start                              DateTime
  end                                DateTime
  memo                               String?
  reason                             String?
  createdAt                          DateTime                @default(now())
  updatedAt                          DateTime
  staffId                            Int
  batchId                            String?
  approvedAt                         DateTime?
  approvedBy                         Int?
  isPending                          Boolean                 @default(false)
  pendingType                        String?
  rejectedAt                         DateTime?
  rejectedBy                         Int?
  rejectionReason                    String?
  date_utc                           DateTime?               @db.Timestamptz(6)
  start_utc                          DateTime?               @db.Timestamptz(6)
  end_utc                            DateTime?               @db.Timestamptz(6)
  createdAt_utc                      DateTime?               @default(now()) @db.Timestamptz(6)
  updatedAt_utc                      DateTime?               @default(now()) @db.Timestamptz(6)
  approvedAt_utc                     DateTime?               @db.Timestamptz(6)
  rejectedAt_utc                     DateTime?               @db.Timestamptz(6)
  Staff_Adjustment_approvedByToStaff Staff?                  @relation("Adjustment_approvedByToStaff", fields: [approvedBy], references: [id])
  Staff_Adjustment_rejectedByToStaff Staff?                  @relation("Adjustment_rejectedByToStaff", fields: [rejectedBy], references: [id])
  Staff_Adjustment_staffIdToStaff    Staff                   @relation("Adjustment_staffIdToStaff", fields: [staffId], references: [id])
  pending_approval_logs              pending_approval_logs[]

  @@index([date_utc], map: "idx_adjustment_date_utc")
}

model Contract {
  id             Int      @id @default(autoincrement())
  empNo          String   @unique
  name           String
  team           String
  email          String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime
  staffId        Int
  dept           String
  fridayHours    String?
  mondayHours    String?
  saturdayHours  String?
  sundayHours    String?
  thursdayHours  String?
  tuesdayHours   String?
  wednesdayHours String?
  Staff          Staff    @relation(fields: [staffId], references: [id])
}

model ContractChangeLog {
  id               Int       @id @default(autoincrement())
  staffId          Int
  changeType       String    @db.VarChar(20)
  oldWorkingDays   Int[]     @default([])
  newWorkingDays   Int[]     @default([])
  oldHours         Json?
  newHours         Json?
  changeDate       DateTime  @default(now())
  processedAt      DateTime?
  processingStatus String    @default("PENDING")
  errorMessage     String?
  createdBy        String?
  Staff            Staff     @relation(fields: [staffId], references: [id])

  @@index([staffId, changeDate])
}

model ContractDisplayCache {
  staffId     Int
  year        Int
  month       Int
  day         Int
  hasContract Boolean
  createdAt   DateTime @default(now())
  updatedAt   DateTime
  Staff       Staff    @relation(fields: [staffId], references: [id])

  @@id([staffId, year, month, day])
  @@index([year, month])
}

model DailyAssignment {
  id             Int      @id @default(autoincrement())
  staffId        Int
  date           DateTime @db.Date
  assignmentType String   @db.VarChar(20)
  customLabel    String?  @db.VarChar(50)
  createdAt      DateTime @default(now())
  updatedAt      DateTime
  Staff          Staff    @relation(fields: [staffId], references: [id])
}

model DepartmentSettings {
  id              Int      @id @default(autoincrement())
  type            String   @db.VarChar(20)
  name            String   @db.VarChar(255)
  shortName       String?  @db.VarChar(50)
  backgroundColor String?  @db.VarChar(7)
  createdAt       DateTime @default(now())
  updatedAt       DateTime
  displayOrder    Int      @default(0)

  @@unique([type, name])
}

model MonthlySchedule {
  id        Int      @id @default(autoincrement())
  date      DateTime
  status    String
  start     DateTime
  end       DateTime
  memo      String?
  source    String   @default("csv")
  createdAt DateTime @default(now())
  updatedAt DateTime
  staffId   Int
  Staff     Staff    @relation(fields: [staffId], references: [id])

  @@unique([staffId, date, start, end])
}

model Schedule {
  id      Int      @id @default(autoincrement())
  status  String
  start   DateTime
  end     DateTime
  staffId Int
  memo    String?
  Staff   Staff    @relation(fields: [staffId], references: [id])
}

model Staff {
  id                                      Int                       @id @default(autoincrement())
  name                                    String
  department                              String
  group                                   String
  authGracePeriod                         DateTime?
  empNo                                   String?                   @unique
  isActive                                Boolean                   @default(true)
  deletedAt                               DateTime?
  isManager                               Boolean                   @default(false)
  managerActivatedAt                      DateTime?
  managerDepartments                      String[]                  @default([])
  managerPermissions                      ManagerPermission[]       @default([])
  position                                String?
  workArrangement                         String?
  Adjustment_Adjustment_approvedByToStaff Adjustment[]              @relation("Adjustment_approvedByToStaff")
  Adjustment_Adjustment_rejectedByToStaff Adjustment[]              @relation("Adjustment_rejectedByToStaff")
  Adjustment_Adjustment_staffIdToStaff    Adjustment[]              @relation("Adjustment_staffIdToStaff")
  Contract                                Contract[]
  ContractChangeLog                       ContractChangeLog[]
  ContractDisplayCache                    ContractDisplayCache[]
  DailyAssignment                         DailyAssignment[]
  MonthlySchedule                         MonthlySchedule[]
  Schedule                                Schedule[]
  TemporaryAssignment                     TemporaryAssignment[]
  global_display_settings                 global_display_settings[]
  global_preset_settings                  global_preset_settings[]
  manager_audit_logs                      manager_audit_logs[]
  pending_approval_logs                   pending_approval_logs[]
  user_auth                               user_auth?
  user_preset_settings                    user_preset_settings?
}

model TemporaryAssignment {
  id        Int      @id @default(autoincrement())
  staffId   Int
  startDate DateTime
  endDate   DateTime
  tempDept  String
  tempGroup String
  reason    String   @default("支援")
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime
  Staff     Staff    @relation(fields: [staffId], references: [id])

  @@unique([staffId, startDate, endDate])
}

model admin_audit_logs {
  id            Int           @id @default(autoincrement())
  adminId       String
  action        String
  targetType    String
  targetId      String?
  details       String?
  ipAddress     String?
  userAgent     String?
  timestamp     DateTime      @default(now())
  system_admins system_admins @relation(fields: [adminId], references: [id])

  @@index([action])
  @@index([adminId])
  @@index([timestamp])
}

model audit_logs {
  id           String    @id
  userId       String
  action       String
  resource     String
  resourceId   String?
  details      String?
  ipAddress    String?
  userAgent    String?
  success      Boolean   @default(true)
  errorMessage String?
  timestamp    DateTime  @default(now())
  user_auth    user_auth @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([action])
  @@index([resource])
  @@index([timestamp])
  @@index([userId])
}

model auth_audit_logs {
  id            String     @id
  userAuthId    String?
  action        AuthAction
  email         String
  ipAddress     String?
  userAgent     String?
  success       Boolean
  failureReason String?
  timestamp     DateTime   @default(now())
  user_auth     user_auth? @relation(fields: [userAuthId], references: [id])
}

model auth_sessions {
  id               String    @id
  userAuthId       String
  token            String    @unique
  refreshToken     String?   @unique
  expiresAt        DateTime
  ipAddress        String?
  userAgent        String?   @db.VarChar(500)
  isActive         Boolean   @default(true)
  createdAt        DateTime  @default(now())
  lastActivityAt   DateTime  @default(now())
  refreshExpiresAt DateTime?
  user_auth        user_auth @relation(fields: [userAuthId], references: [id], onDelete: Cascade)

  @@index([expiresAt])
  @@index([refreshToken])
  @@index([token])
  @@index([userAuthId])
}

model global_display_settings {
  id                       Int      @id @default(1)
  viewMode                 String   @default("normal")
  maskingEnabled           Boolean  @default(false)
  timeRange                String   @default("standard")
  customStatusColors       Json     @default("{}")
  customStatusDisplayNames Json     @default("{}")
  createdAt                DateTime @default(now())
  updatedAt                DateTime
  updatedBy                Int?
  Staff                    Staff?   @relation(fields: [updatedBy], references: [id])
}

model global_preset_settings {
  id                 Int      @id @default(1)
  presets            Json     @default("[]")
  categories         Json     @default("[]")
  pagePresetSettings Json     @default("{}")
  version            String   @default("1.0.0")
  createdAt          DateTime @default(now())
  updatedAt          DateTime
  updatedBy          Int?
  departmentSettings Json     @default("[]")
  displaySettings    Json     @default("{}")
  Staff              Staff?   @relation(fields: [updatedBy], references: [id])
}

model historical_schedules {
  id              Int       @id @default(autoincrement())
  date            DateTime  @db.Date
  originalId      Int?
  batchId         String
  staffId         Int
  staffEmpNo      String?
  staffName       String
  staffDepartment String
  staffGroup      String
  staffIsActive   Boolean   @default(true)
  status          String
  start           DateTime
  end             DateTime
  memo            String?
  reason          String?
  snapshotAt      DateTime  @default(now())
  version         String    @default("1.0")
  date_utc        DateTime? @db.Timestamptz(6)
  start_utc       DateTime? @db.Timestamptz(6)
  end_utc         DateTime? @db.Timestamptz(6)
  snapshotAt_utc  DateTime? @default(now()) @db.Timestamptz(6)

  @@index([batchId])
  @@index([date])
  @@index([date, staffDepartment])
  @@index([date, staffId])
  @@index([staffEmpNo])
  @@index([date_utc], map: "idx_historical_schedules_date_utc")
  @@index([date_utc, staffId], map: "idx_historical_schedules_date_utc_staff")
}

model manager_audit_logs {
  id            Int      @id @default(autoincrement())
  managerId     Int
  targetStaffId Int?
  action        String
  resource      String
  resourceId    String?
  details       String?
  ipAddress     String?
  userAgent     String?
  timestamp     DateTime @default(now())
  Staff         Staff    @relation(fields: [managerId], references: [id])

  @@index([action])
  @@index([managerId])
  @@index([targetStaffId])
  @@index([timestamp])
}

model password_reset_tokens {
  id         String    @id
  userAuthId String
  token      String    @unique
  expiresAt  DateTime
  isUsed     Boolean   @default(false)
  ipAddress  String?
  userAgent  String?
  createdAt  DateTime  @default(now())
  usedAt     DateTime?
  tokenType  TokenType @default(PASSWORD_RESET)
  user_auth  user_auth @relation(fields: [userAuthId], references: [id], onDelete: Cascade)
}

model pending_approval_logs {
  id           Int        @id @default(autoincrement())
  adjustmentId Int
  action       String
  actorId      Int
  reason       String?
  createdAt    DateTime   @default(now())
  Staff        Staff      @relation(fields: [actorId], references: [id])
  Adjustment   Adjustment @relation(fields: [adjustmentId], references: [id])

  @@index([actorId])
  @@index([adjustmentId])
}

model snapshot_logs {
  id              Int            @id @default(autoincrement())
  batchId         String         @unique
  targetDate      DateTime       @db.Date
  recordCount     Int
  status          SnapshotStatus
  startedAt       DateTime       @default(now())
  completedAt     DateTime?
  errorMessage    String?
  targetDate_utc  DateTime?      @db.Timestamptz(6)
  startedAt_utc   DateTime?      @default(now()) @db.Timestamptz(6)
  completedAt_utc DateTime?      @db.Timestamptz(6)

  @@index([targetDate_utc], map: "idx_snapshot_logs_target_date_utc")
  @@index([status])
  @@index([targetDate])
}

model system_admins {
  id               String             @id
  username         String             @unique
  email            String             @unique
  passwordHash     String
  name             String
  isActive         Boolean            @default(true)
  createdAt        DateTime           @default(now())
  updatedAt        DateTime
  lastLoginAt      DateTime?
  admin_audit_logs admin_audit_logs[]
}

model user_auth {
  id                    String                  @id
  email                 String                  @unique
  password              String?
  userType              UserType
  isActive              Boolean                 @default(true)
  emailVerified         DateTime?
  lastLoginAt           DateTime?
  passwordSetAt         DateTime?
  loginAttempts         Int                     @default(0)
  lockedAt              DateTime?
  staffId               Int?                    @unique
  adminRole             AdminRole?
  externalId            String?
  metadata              Json?
  createdAt             DateTime                @default(now())
  updatedAt             DateTime
  deletedAt             DateTime?
  audit_logs            audit_logs[]
  auth_audit_logs       auth_audit_logs[]
  auth_sessions         auth_sessions[]
  password_reset_tokens password_reset_tokens[]
  Staff                 Staff?                  @relation(fields: [staffId], references: [id])
}

model user_preset_schedules {
  id           Int          @id @default(autoincrement())
  userPresetId Int
  status       String
  startTime    Decimal      @db.Decimal(4, 2)
  endTime      Decimal      @db.Decimal(4, 2)
  memo         String?
  sortOrder    Int          @default(0)
  createdAt    DateTime     @default(now())
  user_presets user_presets @relation(fields: [userPresetId], references: [id], onDelete: Cascade)
}

model user_preset_settings {
  id                 Int            @id @default(autoincrement())
  staffId            Int            @unique
  pagePresetSettings Json           @default("{}")
  lastModified       DateTime       @default(now())
  createdAt          DateTime       @default(now())
  updatedAt          DateTime
  Staff              Staff          @relation(fields: [staffId], references: [id], onDelete: Cascade)
  user_presets       user_presets[]
}

model user_presets {
  id                    Int                     @id @default(autoincrement())
  userPresetSettingsId  Int
  presetId              String
  name                  String
  displayName           String
  description           String?
  category              String
  isActive              Boolean                 @default(true)
  customizable          Boolean                 @default(true)
  isDefault             Boolean                 @default(false)
  createdAt             DateTime                @default(now())
  updatedAt             DateTime
  user_preset_schedules user_preset_schedules[]
  user_preset_settings  user_preset_settings    @relation(fields: [userPresetSettingsId], references: [id], onDelete: Cascade)

  @@unique([userPresetSettingsId, presetId])
}

enum AdminRole {
  SUPER_ADMIN
  STAFF_ADMIN
  SYSTEM_ADMIN
}

enum AuthAction {
  LOGIN_ATTEMPT
  LOGIN_SUCCESS
  LOGIN_FAILURE
  PASSWORD_SET
  PASSWORD_CHANGE
  LOGOUT
  TOKEN_REFRESH
  ACCOUNT_LOCKED
  ACCOUNT_UNLOCKED
}

enum ManagerPermission {
  READ
  WRITE
  APPROVE
  DELETE
}

enum SnapshotStatus {
  RUNNING
  COMPLETED
  FAILED
  ROLLED_BACK
}

enum TokenType {
  PASSWORD_RESET
  INITIAL_PASSWORD_SETUP
}

enum UserType {
  ADMIN
  STAFF
}

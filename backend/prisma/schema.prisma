generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Staff {
  id                   Int                   @id @default(autoincrement())
  name                 String
  department           String
  group                String
  authGracePeriod      DateTime?
  empNo                String?               @unique
  isActive             Boolean               @default(true)
  deletedAt            DateTime?
  adjustments          Adjustment[]
  contracts            Contract[]
  dailyAssignments     DailyAssignment[]
  monthlySchedules     MonthlySchedule[]
  schedules            Schedule[]
  temporaryAssignments TemporaryAssignment[]
  userAuth             UserAuth?
}

model Schedule {
  id      Int      @id @default(autoincrement())
  status  String
  start   DateTime
  end     DateTime
  staffId Int
  memo    String?
  staff   Staff    @relation(fields: [staffId], references: [id])
}

model Contract {
  id         Int      @id @default(autoincrement())
  empNo      String   @unique
  name       String
  department String
  team       String
  email      String?
  workDays   String[]
  workHours  String
  breakHours String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  staffId    Int
  staff      Staff    @relation(fields: [staffId], references: [id])
}

model MonthlySchedule {
  id        Int      @id @default(autoincrement())
  date      DateTime
  status    String
  start     DateTime
  end       DateTime
  memo      String?
  source    String   @default("csv")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  staffId   Int
  staff     Staff    @relation(fields: [staffId], references: [id])

  @@unique([staffId, date, start, end])
}

model Adjustment {
  id        Int      @id @default(autoincrement())
  date      DateTime
  status    String
  start     DateTime
  end       DateTime
  memo      String?
  reason    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  staffId   Int
  staff     Staff    @relation(fields: [staffId], references: [id])
}

model TemporaryAssignment {
  id        Int      @id @default(autoincrement())
  staffId   Int
  startDate DateTime
  endDate   DateTime
  tempDept  String
  tempGroup String
  reason    String   @default("支援")
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  staff     Staff    @relation(fields: [staffId], references: [id])

  @@unique([staffId, startDate, endDate])
}

model DailyAssignment {
  id             Int      @id @default(autoincrement())
  staffId        Int
  date           DateTime @db.Date
  assignmentType String   @db.VarChar(10)
  customLabel    String?  @db.VarChar(50)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  staff          Staff    @relation(fields: [staffId], references: [id])

  @@unique([staffId, date])
}

model UserAuth {
  id            String         @id @default(cuid())
  email         String         @unique
  password      String?
  userType      UserType
  isActive      Boolean        @default(true)
  emailVerified DateTime?
  lastLoginAt   DateTime?
  passwordSetAt DateTime?
  loginAttempts Int            @default(0)
  lockedAt      DateTime?
  staffId       Int?           @unique
  adminRole     AdminRole?
  externalId    String?
  metadata      Json?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  deletedAt     DateTime?
  auditLogs     AuthAuditLog[]
  systemAuditLogs AuditLog[]
  sessions      AuthSession[]
  resetTokens   PasswordResetToken[]
  staff         Staff?         @relation(fields: [staffId], references: [id])

  @@map("user_auth")
}

model AuthSession {
  id                String    @id @default(cuid())
  userAuthId        String
  token             String    @unique
  refreshToken      String?   @unique
  expiresAt         DateTime
  refreshExpiresAt  DateTime?
  ipAddress         String?
  userAgent         String?   @db.VarChar(500)
  isActive          Boolean   @default(true)
  lastActivityAt    DateTime  @default(now())
  createdAt         DateTime  @default(now())
  userAuth          UserAuth  @relation(fields: [userAuthId], references: [id], onDelete: Cascade)

  @@index([userAuthId])
  @@index([token])
  @@index([refreshToken])
  @@index([expiresAt])
  @@map("auth_sessions")
}

model AuthAuditLog {
  id            String     @id @default(cuid())
  userAuthId    String?
  action        AuthAction
  email         String
  ipAddress     String?
  userAgent     String?
  success       Boolean
  failureReason String?
  timestamp     DateTime   @default(now())
  userAuth      UserAuth?  @relation(fields: [userAuthId], references: [id])

  @@map("auth_audit_logs")
}

model PasswordResetToken {
  id         String    @id @default(cuid())
  userAuthId String
  token      String    @unique
  tokenType  TokenType @default(PASSWORD_RESET)
  expiresAt  DateTime
  isUsed     Boolean   @default(false)
  ipAddress  String?
  userAgent  String?
  createdAt  DateTime  @default(now())
  usedAt     DateTime?
  userAuth   UserAuth  @relation(fields: [userAuthId], references: [id], onDelete: Cascade)

  @@map("password_reset_tokens")
}

enum UserType {
  ADMIN
  STAFF
}

enum AdminRole {
  SUPER_ADMIN
  STAFF_ADMIN
  SYSTEM_ADMIN
}

enum TokenType {
  PASSWORD_RESET
  INITIAL_PASSWORD_SETUP
}

model AuditLog {
  id         String   @id @default(cuid())
  userId     String
  action     String
  resource   String
  resourceId String?
  details    String?  // JSON string
  ipAddress  String?
  userAgent  String?
  success    Boolean  @default(true)
  errorMessage String?
  timestamp  DateTime @default(now())
  user       UserAuth @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([action])
  @@index([resource])
  @@index([timestamp])
  @@map("audit_logs")
}

enum AuthAction {
  LOGIN_ATTEMPT
  LOGIN_SUCCESS
  LOGIN_FAILURE
  PASSWORD_SET
  PASSWORD_CHANGE
  LOGOUT
  TOKEN_REFRESH
  ACCOUNT_LOCKED
  ACCOUNT_UNLOCKED
}

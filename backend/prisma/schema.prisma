generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Adjustment {
  id              Int                  @id @default(autoincrement())
  date            DateTime
  status          String
  start           DateTime
  end             DateTime
  memo            String?
  reason          String?
  createdAt       DateTime             @default(now())
  updatedAt       DateTime             @updatedAt
  staffId         Int
  batchId         String?
  approvedAt      DateTime?
  approvedBy      Int?
  isPending       Boolean              @default(false)
  pendingType     String?
  rejectedAt      DateTime?
  rejectedBy      Int?
  rejectionReason String?
  // CLAUDE.md厳格ルール準拠: 新UTCカラム追加
  date_utc        DateTime?
  start_utc       DateTime?
  end_utc         DateTime?
  createdAt_utc   DateTime?
  updatedAt_utc   DateTime?
  approvedAt_utc  DateTime?
  rejectedAt_utc  DateTime?
  ApprovedBy      Staff?               @relation("ApprovedAdjustments", fields: [approvedBy], references: [id])
  RejectedBy      Staff?               @relation("RejectedAdjustments", fields: [rejectedBy], references: [id])
  Staff           Staff                @relation(fields: [staffId], references: [id])
  ApprovalLogs    PendingApprovalLog[]
}

model Contract {
  id             Int      @id @default(autoincrement())
  empNo          String   @unique
  name           String
  team           String
  email          String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  staffId        Int
  dept           String
  fridayHours    String?
  mondayHours    String?
  saturdayHours  String?
  sundayHours    String?
  thursdayHours  String?
  tuesdayHours   String?
  wednesdayHours String?
  Staff          Staff    @relation(fields: [staffId], references: [id])
}

model ContractChangeLog {
  id               Int       @id @default(autoincrement())
  staffId          Int
  changeType       String    @db.VarChar(20)
  oldWorkingDays   Int[]     @default([])
  newWorkingDays   Int[]     @default([])
  oldHours         Json?
  newHours         Json?
  changeDate       DateTime  @default(now())
  processedAt      DateTime?
  processingStatus String    @default("PENDING")
  errorMessage     String?
  createdBy        String?
  Staff            Staff     @relation(fields: [staffId], references: [id])

  @@index([staffId, changeDate])
}

model DailyAssignment {
  id             Int      @id @default(autoincrement())
  staffId        Int
  date           DateTime @db.Date
  assignmentType String   @db.VarChar(20)
  customLabel    String?  @db.VarChar(50)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  Staff          Staff    @relation(fields: [staffId], references: [id])
}

model MonthlySchedule {
  id        Int      @id @default(autoincrement())
  date      DateTime
  status    String
  start     DateTime
  end       DateTime
  memo      String?
  source    String   @default("csv")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  staffId   Int
  Staff     Staff    @relation(fields: [staffId], references: [id])

  @@unique([staffId, date, start, end])
}

model ContractDisplayCache {
  staffId     Int
  year        Int
  month       Int
  day         Int
  hasContract Boolean
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  Staff       Staff    @relation(fields: [staffId], references: [id])

  @@id([staffId, year, month, day])
  @@index([year, month])
}

model Schedule {
  id      Int      @id @default(autoincrement())
  status  String
  start   DateTime
  end     DateTime
  staffId Int
  memo    String?
  Staff   Staff    @relation(fields: [staffId], references: [id])
}

model Staff {
  id                   Int                    @id @default(autoincrement())
  name                 String
  department           String
  group                String
  authGracePeriod      DateTime?
  empNo                String?                @unique
  isActive             Boolean                @default(true)
  deletedAt            DateTime?
  isManager            Boolean                @default(false)
  managerActivatedAt   DateTime?
  managerDepartments   String[]               @default([])
  managerPermissions   ManagerPermission[]    @default([])
  ApprovedAdjustments  Adjustment[]           @relation("ApprovedAdjustments")
  RejectedAdjustments  Adjustment[]           @relation("RejectedAdjustments")
  Adjustment           Adjustment[]
  Contract             Contract[]
  ContractChangeLogs   ContractChangeLog[]
  ContractDisplayCache ContractDisplayCache[]
  DailyAssignment      DailyAssignment[]
  MonthlySchedule      MonthlySchedule[]
  Schedule             Schedule[]
  TemporaryAssignment  TemporaryAssignment[]
  ManagerAuditLogs     ManagerAuditLog[]      @relation("ManagerActions")
  ApprovalActions      PendingApprovalLog[]   @relation("ApprovalActions")
  user_auth            user_auth?
  UserPresetSettings   UserPresetSettings?
  GlobalDisplaySettings GlobalDisplaySettings[]
  GlobalPresetSettings GlobalPresetSettings[] @relation("GlobalPresetUpdates")
}

model TemporaryAssignment {
  id        Int      @id @default(autoincrement())
  staffId   Int
  startDate DateTime
  endDate   DateTime
  tempDept  String
  tempGroup String
  reason    String   @default("支援")
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Staff     Staff    @relation(fields: [staffId], references: [id])

  @@unique([staffId, startDate, endDate])
}

model audit_logs {
  id           String    @id
  userId       String
  action       String
  resource     String
  resourceId   String?
  details      String?
  ipAddress    String?
  userAgent    String?
  success      Boolean   @default(true)
  errorMessage String?
  timestamp    DateTime  @default(now())
  user_auth    user_auth @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([action])
  @@index([resource])
  @@index([timestamp])
  @@index([userId])
}

model auth_audit_logs {
  id            String     @id
  userAuthId    String?
  action        AuthAction
  email         String
  ipAddress     String?
  userAgent     String?
  success       Boolean
  failureReason String?
  timestamp     DateTime   @default(now())
  user_auth     user_auth? @relation(fields: [userAuthId], references: [id])
}

model auth_sessions {
  id               String    @id
  userAuthId       String
  token            String    @unique
  refreshToken     String?   @unique
  expiresAt        DateTime
  ipAddress        String?
  userAgent        String?   @db.VarChar(500)
  isActive         Boolean   @default(true)
  createdAt        DateTime  @default(now())
  lastActivityAt   DateTime  @default(now())
  refreshExpiresAt DateTime?
  user_auth        user_auth @relation(fields: [userAuthId], references: [id], onDelete: Cascade)

  @@index([expiresAt])
  @@index([refreshToken])
  @@index([token])
  @@index([userAuthId])
}

model password_reset_tokens {
  id         String    @id
  userAuthId String
  token      String    @unique
  expiresAt  DateTime
  isUsed     Boolean   @default(false)
  ipAddress  String?
  userAgent  String?
  createdAt  DateTime  @default(now())
  usedAt     DateTime?
  tokenType  TokenType @default(PASSWORD_RESET)
  user_auth  user_auth @relation(fields: [userAuthId], references: [id], onDelete: Cascade)
}

model user_auth {
  id                    String                  @id
  email                 String                  @unique
  password              String?
  userType              UserType
  isActive              Boolean                 @default(true)
  emailVerified         DateTime?
  lastLoginAt           DateTime?
  passwordSetAt         DateTime?
  loginAttempts         Int                     @default(0)
  lockedAt              DateTime?
  staffId               Int?                    @unique
  adminRole             AdminRole?
  externalId            String?
  metadata              Json?
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt
  deletedAt             DateTime?
  audit_logs            audit_logs[]
  auth_audit_logs       auth_audit_logs[]
  auth_sessions         auth_sessions[]
  password_reset_tokens password_reset_tokens[]
  Staff                 Staff?                  @relation(fields: [staffId], references: [id])
}

model DepartmentSettings {
  id              Int      @id @default(autoincrement())
  type            String   @db.VarChar(20)
  name            String   @db.VarChar(255)
  shortName       String?  @db.VarChar(50)
  backgroundColor String?  @db.VarChar(7)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  displayOrder    Int      @default(0)

  @@unique([type, name])
  @@map("DepartmentSettings")
}

model HistoricalSchedule {
  id              Int      @id @default(autoincrement())
  date            DateTime @db.Date
  originalId      Int?
  batchId         String
  staffId         Int
  staffEmpNo      String?
  staffName       String
  staffDepartment String
  staffGroup      String
  staffIsActive   Boolean  @default(true)
  status          String
  start           DateTime
  end             DateTime
  memo            String?
  reason          String?
  snapshotAt      DateTime @default(now())
  version         String   @default("1.0")
  // CLAUDE.md厳格ルール準拠: 新UTCカラム追加
  date_utc        DateTime?
  start_utc       DateTime?
  end_utc         DateTime?
  snapshotAt_utc  DateTime?

  @@index([date])
  @@index([date, staffDepartment])
  @@index([date, staffId])
  @@index([staffEmpNo])
  @@index([batchId])
  @@map("historical_schedules")
}

model SnapshotLog {
  id           Int            @id @default(autoincrement())
  batchId      String         @unique
  targetDate   DateTime       @db.Date
  recordCount  Int
  status       SnapshotStatus
  startedAt    DateTime       @default(now())
  completedAt  DateTime?
  errorMessage String?
  // CLAUDE.md厳格ルール準拠: 新UTCカラム追加
  targetDate_utc   DateTime?
  startedAt_utc    DateTime?
  completedAt_utc  DateTime?

  @@index([targetDate])
  @@index([status])
  @@map("snapshot_logs")
}

model PendingApprovalLog {
  id           Int        @id @default(autoincrement())
  adjustmentId Int
  action       String
  actorId      Int
  reason       String?
  createdAt    DateTime   @default(now())
  Actor        Staff      @relation("ApprovalActions", fields: [actorId], references: [id])
  Adjustment   Adjustment @relation(fields: [adjustmentId], references: [id])

  @@index([adjustmentId])
  @@index([actorId])
  @@map("pending_approval_logs")
}

model UserPresetSettings {
  id                 Int          @id @default(autoincrement())
  staffId            Int          @unique
  pagePresetSettings Json         @default("{}")
  lastModified       DateTime     @default(now())
  createdAt          DateTime     @default(now())
  updatedAt          DateTime     @updatedAt
  Staff              Staff        @relation(fields: [staffId], references: [id], onDelete: Cascade)
  UserPresets        UserPreset[]

  @@map("user_preset_settings")
}

model UserPreset {
  id                   Int                  @id @default(autoincrement())
  userPresetSettingsId Int
  presetId             String
  name                 String
  displayName          String
  description          String?
  category             String
  isActive             Boolean              @default(true)
  customizable         Boolean              @default(true)
  isDefault            Boolean              @default(false)
  createdAt            DateTime             @default(now())
  updatedAt            DateTime             @updatedAt
  UserPresetSchedules  UserPresetSchedule[]
  UserPresetSettings   UserPresetSettings   @relation(fields: [userPresetSettingsId], references: [id], onDelete: Cascade)

  @@unique([userPresetSettingsId, presetId])
  @@map("user_presets")
}

model UserPresetSchedule {
  id           Int        @id @default(autoincrement())
  userPresetId Int
  status       String
  startTime    Decimal    @db.Decimal(4, 2)
  endTime      Decimal    @db.Decimal(4, 2)
  memo         String?
  sortOrder    Int        @default(0)
  createdAt    DateTime   @default(now())
  UserPreset   UserPreset @relation(fields: [userPresetId], references: [id], onDelete: Cascade)

  @@map("user_preset_schedules")
}

model SystemAdmin {
  id             String          @id @default(cuid())
  username       String          @unique
  email          String          @unique
  passwordHash   String
  name           String
  isActive       Boolean         @default(true)
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  lastLoginAt    DateTime?
  AdminAuditLogs AdminAuditLog[]

  @@map("system_admins")
}

model ManagerAuditLog {
  id            Int      @id @default(autoincrement())
  managerId     Int
  targetStaffId Int?
  action        String
  resource      String
  resourceId    String?
  details       String?
  ipAddress     String?
  userAgent     String?
  timestamp     DateTime @default(now())
  Manager       Staff    @relation("ManagerActions", fields: [managerId], references: [id])

  @@index([managerId])
  @@index([targetStaffId])
  @@index([action])
  @@index([timestamp])
  @@map("manager_audit_logs")
}

model AdminAuditLog {
  id          Int         @id @default(autoincrement())
  adminId     String
  action      String
  targetType  String
  targetId    String?
  details     String?
  ipAddress   String?
  userAgent   String?
  timestamp   DateTime    @default(now())
  SystemAdmin SystemAdmin @relation(fields: [adminId], references: [id])

  @@index([adminId])
  @@index([action])
  @@index([timestamp])
  @@map("admin_audit_logs")
}

enum AdminRole {
  SUPER_ADMIN
  STAFF_ADMIN
  SYSTEM_ADMIN
}

enum AuthAction {
  LOGIN_ATTEMPT
  LOGIN_SUCCESS
  LOGIN_FAILURE
  PASSWORD_SET
  PASSWORD_CHANGE
  LOGOUT
  TOKEN_REFRESH
  ACCOUNT_LOCKED
  ACCOUNT_UNLOCKED
}

enum TokenType {
  PASSWORD_RESET
  INITIAL_PASSWORD_SETUP
}

enum UserType {
  ADMIN
  STAFF
}

enum SnapshotStatus {
  RUNNING
  COMPLETED
  FAILED
  ROLLED_BACK
}

enum ManagerPermission {
  READ
  WRITE
  APPROVE
  DELETE
}

model GlobalDisplaySettings {
  id                          Int      @id @default(1)
  maskingEnabled              Boolean  @default(false)
  timeRange                   String   @default("standard")
  customStatusColors          Json     @default("{}")
  customStatusDisplayNames    Json     @default("{}")
  createdAt                   DateTime @default(now())
  updatedAt                   DateTime @updatedAt
  updatedBy                   Int?
  UpdatedByStaff              Staff?   @relation(fields: [updatedBy], references: [id])

  @@map("global_display_settings")
}

model GlobalPresetSettings {
  id                          Int      @id @default(1)
  presets                     Json     @default("[]")
  categories                  Json     @default("[]")
  pagePresetSettings          Json     @default("{}")
  displaySettings             Json     @default("{}")
  departmentSettings          Json     @default("[]")
  version                     String   @default("1.0.0")
  createdAt                   DateTime @default(now())
  updatedAt                   DateTime @updatedAt
  updatedBy                   Int?
  UpdatedByStaff              Staff?   @relation("GlobalPresetUpdates", fields: [updatedBy], references: [id])

  @@map("global_preset_settings")
}

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Staff {
  id                   Int                   @id @default(autoincrement())
  empNo                String?               @unique
  name                 String
  department           String
  group                String
  adjustments          Adjustment[]
  contracts            Contract[]
  dailyAssignments     DailyAssignment[]
  monthlySchedules     MonthlySchedule[]
  schedules            Schedule[]
  temporaryAssignments TemporaryAssignment[]
  responsibilities     StaffResponsibility[]
}

model Schedule {
  id      Int      @id @default(autoincrement())
  status  String
  start   DateTime
  end     DateTime
  memo    String?
  staffId Int
  staff   Staff    @relation(fields: [staffId], references: [id])
}

model Contract {
  id             Int      @default(autoincrement())
  empNo          String   @id
  name           String
  dept           String
  team           String
  email          String
  mondayHours    String?
  tuesdayHours   String?
  wednesdayHours String?
  thursdayHours  String?
  fridayHours    String?
  saturdayHours  String?
  sundayHours    String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  staffId        Int
  staff          Staff    @relation(fields: [staffId], references: [id])
}

model MonthlySchedule {
  id        Int      @id @default(autoincrement())
  date      DateTime
  status    String
  start     DateTime
  end       DateTime
  memo      String?
  source    String   @default("csv")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  staffId   Int
  staff     Staff    @relation(fields: [staffId], references: [id])

  @@unique([staffId, date, start, end])
}

model Adjustment {
  id        Int      @id @default(autoincrement())
  date      DateTime
  status    String
  start     DateTime
  end       DateTime
  memo      String?
  reason    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  staffId   Int
  staff     Staff    @relation(fields: [staffId], references: [id])
}

model TemporaryAssignment {
  id        Int      @id @default(autoincrement())
  staffId   Int
  startDate DateTime
  endDate   DateTime
  tempDept  String
  tempGroup String
  reason    String   @default("支援")
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  staff     Staff    @relation(fields: [staffId], references: [id])

  @@unique([staffId, startDate, endDate])
}

model DailyAssignment {
  id             Int      @id @default(autoincrement())
  staffId        Int
  date           DateTime @db.Date
  assignmentType String   @db.VarChar(10)
  customLabel    String?  @db.VarChar(50)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  staff          Staff    @relation(fields: [staffId], references: [id])

  @@unique([staffId, date])
}

model StaffResponsibility {
  id              Int      @id @default(autoincrement())
  staffId         Int
  date            DateTime @db.Date
  responsibilities Json
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  staff           Staff    @relation(fields: [staffId], references: [id])

  @@unique([staffId, date])
}

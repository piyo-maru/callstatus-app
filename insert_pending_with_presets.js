const fs = require('fs');

// ÁîüÊàê„Åï„Çå„Åüpending schedulesÔºà„Éó„É™„Çª„ÉÉ„ÉàÂØæÂøúÔºâ„ÇíË™≠„ÅøËæº„Åø
const pendingSchedules = JSON.parse(fs.readFileSync('/root/callstatus-app/pending_schedules_with_presets.json', 'utf8'));

// SQLÁîüÊàêÔºàPendingSchedule„ÉÜ„Éº„Éñ„É´Áî®Ôºâ
function generatePendingScheduleSQL() {
  const sqlStatements = [];
  
  // Êó¢Â≠ò„ÅÆpending schedules„ÇíÂâäÈô§Ôºà7Êúà„Éª8ÊúàÂàÜÔºâ
  sqlStatements.push(`
DELETE FROM "PendingSchedule" 
WHERE "date" >= '2025-07-01' 
AND "date" < '2025-09-01';
`);

  // Êñ∞„Åó„ÅÑpending schedules„ÇíÊåøÂÖ•
  const insertValues = [];
  
  pendingSchedules.forEach((schedule, index) => {
    const values = [
      schedule.staffId,                                              // staffId
      `'${schedule.date}'`,                                          // date
      `'${schedule.presetId}'`,                                      // presetId
      schedule.memo ? `'${schedule.memo.replace(/'/g, "''")}'` : 'NULL', // memo
      `'${schedule.submittedAt}'`,                                   // submittedAt
      schedule.submittedBy,                                          // submittedBy
      `'${schedule.submittedAt}'`,                                   // createdAt
      `'${schedule.submittedAt}'`                                    // updatedAt
    ];
    
    insertValues.push(`(${values.join(', ')})`);
  });
  
  // „Éê„ÉÉ„ÉÅÊåøÂÖ•Ôºà500‰ª∂„Åö„Å§Ôºâ
  const batchSize = 500;
  for (let i = 0; i < insertValues.length; i += batchSize) {
    const batch = insertValues.slice(i, i + batchSize);
    sqlStatements.push(`
INSERT INTO "PendingSchedule" (
  "staffId", "date", "presetId", "memo", "submittedAt", "submittedBy", "createdAt", "updatedAt"
) VALUES
${batch.join(',\n')};
`);
  }
  
  return sqlStatements.join('\n');
}

// ÂæìÊù•„ÅÆAdjustment„ÉÜ„Éº„Éñ„É´„Åã„Çâpending„ÇíÂâäÈô§„Åô„ÇãSQL
function generateCleanupSQL() {
  return `
-- ÂæìÊù•„ÅÆAdjustmentÂÜÖ„ÅÆpending„Éá„Éº„Çø„ÇíÂâäÈô§
DELETE FROM "Adjustment" 
WHERE "isPending" = true 
AND "date" >= '2025-07-01' 
AND "date" < '2025-09-01';
`;
}

// SQLÁîüÊàê„Å®Âá∫Âäõ
const cleanupSQL = generateCleanupSQL();
const pendingSQL = generatePendingScheduleSQL();
const fullSQL = cleanupSQL + '\n' + pendingSQL;

fs.writeFileSync('/root/callstatus-app/insert_pending_schedules_with_presets.sql', fullSQL);

console.log(`‚úÖ SQL„Éï„Ç°„Ç§„É´ÁîüÊàêÂÆå‰∫Ü: insert_pending_schedules_with_presets.sql`);
console.log(`üìä ÁîüÊàê‰ª∂Êï∞: ${pendingSchedules.length}‰ª∂`);
console.log(`üìÖ ÂØæË±°ÊúüÈñì: 2025Âπ¥7Êúà„Éª8Êúà`);
console.log(`üîÑ Âá¶ÁêÜ: Adjustment pendingÂâäÈô§ + PendingScheduleÊñ∞Ë¶èÊåøÂÖ•`);

// APIÁµåÁî±„Åß„ÅÆÊåøÂÖ•„Çπ„ÇØ„É™„Éó„Éà„ÇÇÁîüÊàê
const apiScript = `
const axios = require('axios');

const baseURL = 'http://localhost:3002/api';

async function insertPendingSchedulesWithPresets() {
  try {
    console.log('üîÑ Êó¢Â≠ò„ÅÆpending schedules„ÇíÂâäÈô§‰∏≠...');
    
    // 1. Adjustment„ÉÜ„Éº„Éñ„É´„ÅÆpending schedules„ÇíÂâäÈô§
    try {
      await axios.delete(\`\${baseURL}/schedules/pending/adjustment/bulk\`, {
        data: {
          startDate: '2025-07-01',
          endDate: '2025-08-31'
        }
      });
      console.log('‚úÖ Adjustment pendingÂâäÈô§ÂÆå‰∫Ü');
    } catch (error) {
      console.log('‚ÑπÔ∏è Adjustment pendingÂâäÈô§„Çπ„Ç≠„ÉÉ„ÉóÔºà„Ç®„É≥„Éâ„Éù„Ç§„É≥„Éà„Å™„ÅóÔºâ');
    }
    
    // 2. PendingSchedule„ÉÜ„Éº„Éñ„É´„ÅÆ„Éá„Éº„Çø„ÇíÂâäÈô§
    try {
      await axios.delete(\`\${baseURL}/pending-schedules/bulk\`, {
        data: {
          startDate: '2025-07-01',
          endDate: '2025-08-31'
        }
      });
      console.log('‚úÖ PendingScheduleÂâäÈô§ÂÆå‰∫Ü');
    } catch (error) {
      console.log('‚ÑπÔ∏è PendingScheduleÂâäÈô§„Çπ„Ç≠„ÉÉ„Éó:', error.response?.status);
    }
    
    console.log('üìù Êñ∞„Åó„ÅÑpending schedulesÔºà„Éó„É™„Çª„ÉÉ„ÉàÂØæÂøúÔºâ„ÇíÊåøÂÖ•‰∏≠...');
    
    // 3. Êñ∞„Åó„ÅÑpending schedules„ÇíÊåøÂÖ•
    const schedules = ${JSON.stringify(pendingSchedules, null, 2)};
    
    try {
      const insertResponse = await axios.post(\`\${baseURL}/pending-schedules/bulk\`, {
        schedules: schedules
      });
      
      console.log('‚úÖ ÊåøÂÖ•ÂÆå‰∫Ü:', insertResponse.data);
      console.log(\`üìä Âá¶ÁêÜ‰ª∂Êï∞: \${schedules.length}‰ª∂\`);
    } catch (error) {
      console.error('‚ùå ÊåøÂÖ•„Ç®„É©„Éº:', error.response?.data || error.message);
      console.log('üìù ‰ª£Êõø„Å®„Åó„Å¶ÂÄãÂà•ÊåøÂÖ•„ÇíË©¶Ë°å‰∏≠...');
      
      // ÂÄãÂà•ÊåøÂÖ•„ÅÆ„Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØ
      let successCount = 0;
      for (const schedule of schedules) {
        try {
          await axios.post(\`\${baseURL}/pending-schedules\`, schedule);
          successCount++;
        } catch (individualError) {
          console.error(\`‚ùå ÂÄãÂà•ÊåøÂÖ•Â§±Êïó (\${schedule.staffId}, \${schedule.date}):\`, individualError.response?.data || individualError.message);
        }
      }
      console.log(\`üìä ÂÄãÂà•ÊåøÂÖ•ÂÆå‰∫Ü: \${successCount}/\${schedules.length}‰ª∂\`);
    }
    
  } catch (error) {
    console.error('‚ùå ÂÖ®‰Ωì„Ç®„É©„Éº:', error.response?.data || error.message);
  }
}

insertPendingSchedulesWithPresets();
`;

fs.writeFileSync('/root/callstatus-app/insert_pending_presets_via_api.js', apiScript);

console.log(`üì° APIÁµåÁî±ÊåøÂÖ•„Çπ„ÇØ„É™„Éó„ÉàÁîüÊàêÂÆå‰∫Ü: insert_pending_presets_via_api.js`);
console.log(`\nÂÆüË°åÊñπÊ≥ï:`);
console.log(`1. SQL„Éï„Ç°„Ç§„É´Áõ¥Êé•ÂÆüË°å: psql -f insert_pending_schedules_with_presets.sql`);
console.log(`2. APIÁµåÁî±ÂÆüË°å: node insert_pending_presets_via_api.js`);